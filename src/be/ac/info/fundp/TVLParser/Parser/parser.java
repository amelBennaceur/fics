//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 29 12:13:33 CEST 2010
//----------------------------------------------------

package be.ac.info.fundp.TVLParser.Parser;

import be.ac.info.fundp.TVLParser.SyntaxTree.AbsExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.AndAggExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.AndExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.Attribute;
import be.ac.info.fundp.TVLParser.SyntaxTree.AttributeBody;
import be.ac.info.fundp.TVLParser.SyntaxTree.AttributeConditionnal;
import be.ac.info.fundp.TVLParser.SyntaxTree.AvgAggExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.BaseAttribute;
import be.ac.info.fundp.TVLParser.SyntaxTree.Cardinality;
import be.ac.info.fundp.TVLParser.SyntaxTree.ChildrenAttributeID;
import be.ac.info.fundp.TVLParser.SyntaxTree.Constant;
import be.ac.info.fundp.TVLParser.SyntaxTree.Constraint;
import be.ac.info.fundp.TVLParser.SyntaxTree.CountAggExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.Data;
import be.ac.info.fundp.TVLParser.SyntaxTree.DataPair;
import be.ac.info.fundp.TVLParser.SyntaxTree.DataPairList;
import be.ac.info.fundp.TVLParser.SyntaxTree.DivideExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.EqualsExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.ExcludesExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.Expression;
import be.ac.info.fundp.TVLParser.SyntaxTree.ExpressionList;
import be.ac.info.fundp.TVLParser.SyntaxTree.FalseExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.Feature;
import be.ac.info.fundp.TVLParser.SyntaxTree.FeatureBody;
import be.ac.info.fundp.TVLParser.SyntaxTree.FeatureBodyItem;
import be.ac.info.fundp.TVLParser.SyntaxTree.FeatureGroup;
import be.ac.info.fundp.TVLParser.SyntaxTree.GEQExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.GreaterExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.HierarchicalFeatures;
import be.ac.info.fundp.TVLParser.SyntaxTree.IfAndOnlyIfExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.ImpliesExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.InExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.IncludesExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.IntExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.InverseImpliesExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.LEQExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.LongIDExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.LowerExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.MaxAggExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.MinAggExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.MinusExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.Model;
import be.ac.info.fundp.TVLParser.SyntaxTree.ModelItem;
import be.ac.info.fundp.TVLParser.SyntaxTree.MulAggExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.NotEqualsExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.NotExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.OrAggExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.OrExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.ParenthesesExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.PlusExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.QuestExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.RealExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.Record;
import be.ac.info.fundp.TVLParser.SyntaxTree.RecordBody;
import be.ac.info.fundp.TVLParser.SyntaxTree.RecordField;
import be.ac.info.fundp.TVLParser.SyntaxTree.SetExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.SimpleType;
import be.ac.info.fundp.TVLParser.SyntaxTree.StructAttributeBody;
import be.ac.info.fundp.TVLParser.SyntaxTree.SubAttribute;
import be.ac.info.fundp.TVLParser.SyntaxTree.SumAggExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.TimesExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.TrueExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.Type;
import be.ac.info.fundp.TVLParser.SyntaxTree.XorAggExpression;
import be.ac.info.fundp.TVLParser.SyntaxTree.ZeroExpression;
import be.ac.info.fundp.TVLParser.symbolTables.FeaturesSymbolTable;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Thu Jul 29 12:13:33 CEST 2010
 */
public class parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public parser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\226\000\002\002\004\000\002\002\003\000\002\002"
			+ "\004\000\002\003\003\000\002\003\003\000\002\003\003"
			+ "\000\002\005\003\000\002\005\003\000\002\006\007\000"
			+ "\002\006\007\000\002\006\007\000\002\006\005\000\002"
			+ "\006\005\000\002\006\005\000\002\007\007\000\002\010"
			+ "\003\000\002\010\004\000\002\011\003\000\002\011\005"
			+ "\000\002\004\007\000\002\004\007\000\002\004\007\000"
			+ "\002\004\007\000\002\004\007\000\002\004\007\000\002"
			+ "\012\003\000\002\012\003\000\002\012\003\000\002\012"
			+ "\003\000\002\013\003\000\002\013\005\000\002\014\003"
			+ "\000\002\014\007\000\002\015\006\000\002\015\004\000"
			+ "\002\015\007\000\002\015\005\000\002\022\002\000\002"
			+ "\022\004\000\002\023\003\000\002\023\003\000\002\023"
			+ "\003\000\002\023\003\000\002\024\007\000\002\016\003"
			+ "\000\002\016\005\000\002\017\003\000\002\017\004\000"
			+ "\002\017\004\000\002\017\005\000\002\017\004\000\002"
			+ "\017\004\000\002\017\004\000\002\017\005\000\002\017"
			+ "\003\000\002\020\003\000\002\020\003\000\002\020\003"
			+ "\000\002\020\010\000\002\021\003\000\002\021\003\000"
			+ "\002\021\003\000\002\021\003\000\002\025\003\000\002"
			+ "\025\007\000\002\026\006\000\002\026\006\000\002\026"
			+ "\006\000\002\026\006\000\002\026\006\000\002\027\002"
			+ "\000\002\027\004\000\002\027\006\000\002\027\004\000"
			+ "\002\027\004\000\002\030\013\000\002\030\013\000\002"
			+ "\030\013\000\002\030\013\000\002\030\006\000\002\030"
			+ "\006\000\002\030\006\000\002\030\006\000\002\031\003"
			+ "\000\002\031\004\000\002\032\005\000\002\033\005\000"
			+ "\002\033\005\000\002\033\005\000\002\033\005\000\002"
			+ "\033\005\000\002\033\004\000\002\033\005\000\002\033"
			+ "\003\000\002\033\003\000\002\033\003\000\002\033\005"
			+ "\000\002\033\005\000\002\033\005\000\002\033\005\000"
			+ "\002\033\005\000\002\033\005\000\002\033\005\000\002"
			+ "\033\006\000\002\033\006\000\002\033\006\000\002\033"
			+ "\006\000\002\033\006\000\002\033\006\000\002\033\005"
			+ "\000\002\033\005\000\002\033\005\000\002\033\005\000"
			+ "\002\033\005\000\002\033\005\000\002\033\004\000\002"
			+ "\033\006\000\002\033\007\000\002\033\006\000\002\033"
			+ "\006\000\002\033\006\000\002\033\006\000\002\033\006"
			+ "\000\002\033\006\000\002\033\006\000\002\033\006\000"
			+ "\002\033\006\000\002\033\006\000\002\033\006\000\002"
			+ "\033\006\000\002\033\003\000\002\033\003\000\002\033"
			+ "\003\000\002\036\005\000\002\036\005\000\002\034\003"
			+ "\000\002\034\005\000\002\035\005\000\002\035\010\000"
			+ "\002\037\003\000\002\037\003\000\002\037\003\000\002"
			+ "\037\003\000\002\040\006\000\002\040\006\000\002\040"
			+ "\004\000\002\041\006\000\002\042\003\000\002\042\005" + "\000\002\043\004" });

	/** Access to production table. */
	@Override
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\u0152\000\026\011\004\014\024\015\011\016\023\017"
			+ "\005\020\027\023\022\030\025\031\016\111\015\001\002"
			+ "\000\026\024\uffe8\025\uffe8\026\uffe8\027\uffe8\075\uffe8\077"
			+ "\uffe8\102\uffe8\103\uffe8\104\uffe8\111\u0150\001\002\000\004"
			+ "\111\u0146\001\002\000\030\002\ufffa\011\ufffa\014\ufffa\015"
			+ "\ufffa\016\ufffa\017\ufffa\020\ufffa\023\ufffa\030\ufffa\031\ufffa"
			+ "\111\ufffa\001\002\000\030\002\ufffd\011\ufffd\014\ufffd\015"
			+ "\ufffd\016\ufffd\017\ufffd\020\ufffd\023\ufffd\030\ufffd\031\ufffd"
			+ "\111\ufffd\001\002\000\030\002\000\011\004\014\024\015"
			+ "\011\016\023\017\005\020\027\023\022\030\025\031\016"
			+ "\111\015\001\002\000\004\111\u0140\001\002\000\004\002"
			+ "\u013f\001\002\000\030\002\ufffe\011\ufffe\014\ufffe\015\ufffe"
			+ "\016\ufffe\017\ufffe\020\ufffe\023\ufffe\030\ufffe\031\ufffe\111"
			+ "\ufffe\001\002\000\030\002\ufffc\011\ufffc\014\ufffc\015\ufffc"
			+ "\016\ufffc\017\ufffc\020\ufffc\023\ufffc\030\ufffc\031\ufffc\111"
			+ "\ufffc\001\002\000\100\024\uffe5\025\uffe5\026\uffe5\027\uffe5"
			+ "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\044\uffe5\045"
			+ "\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5"
			+ "\055\uffe5\056\uffe5\071\uffe5\073\uffe5\074\uffe5\075\uffe5\077"
			+ "\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5"
			+ "\107\uffe5\001\002\000\100\024\uffe7\025\uffe7\026\uffe7\027"
			+ "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\044\uffe7"
			+ "\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053"
			+ "\uffe7\055\uffe7\056\uffe7\071\uffe7\073\uffe7\074\uffe7\075\uffe7"
			+ "\077\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\106"
			+ "\uffe7\107\uffe7\001\002\000\030\002\ufffb\011\ufffb\014\ufffb"
			+ "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\023\ufffb\030\ufffb\031"
			+ "\ufffb\111\ufffb\001\002\000\016\024\304\025\302\026\301"
			+ "\027\275\075\276\102\303\001\002\000\100\024\uffe4\025"
			+ "\uffe4\026\uffe4\027\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4"
			+ "\040\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051"
			+ "\uffe4\052\uffe4\053\uffe4\055\uffe4\056\uffe4\071\uffe4\073\uffe4"
			+ "\074\uffe4\075\uffe4\077\uffe4\101\uffe4\102\uffe4\103\uffe4\104"
			+ "\273\105\uffe4\106\uffe4\107\uffe4\001\002\000\010\014\251"
			+ "\015\253\020\252\001\002\000\004\111\245\001\002\000"
			+ "\004\111\243\001\002\000\100\024\uffe6\025\uffe6\026\uffe6"
			+ "\027\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\044"
			+ "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6"
			+ "\053\uffe6\055\uffe6\056\uffe6\071\uffe6\073\uffe6\074\uffe6\075"
			+ "\uffe6\077\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6"
			+ "\106\uffe6\107\uffe6\001\002\000\034\002\uffe2\011\uffe2\014"
			+ "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\023\uffe2\030\uffe2"
			+ "\031\uffe2\077\uffe2\103\uffe2\111\uffe2\001\002\000\004\111"
			+ "\030\001\002\000\006\071\031\107\032\001\002\000\006"
			+ "\075\033\102\034\001\002\000\032\002\ufff5\011\ufff5\014"
			+ "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\023\ufff5\030\ufff5"
			+ "\031\ufff5\103\ufff5\111\ufff5\001\002\000\012\004\232\005"
			+ "\233\006\234\055\236\001\002\000\056\004\057\005\060"
			+ "\006\062\011\037\030\025\031\016\041\044\042\045\043"
			+ "\053\053\054\057\061\060\056\061\042\062\064\063\055"
			+ "\064\063\065\041\066\050\067\043\070\052\100\040\111"
			+ "\015\001\002\000\004\107\036\001\002\000\032\002\ufff8"
			+ "\011\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\023"
			+ "\ufff8\030\ufff8\031\ufff8\103\ufff8\111\ufff8\001\002\000\100"
			+ "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\034\uffe8\035\uffe8\036"
			+ "\uffe8\037\uffe8\040\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8"
			+ "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8\071"
			+ "\uffe8\073\uffe8\074\uffe8\075\uffe8\077\uffe8\101\uffe8\102\uffe8"
			+ "\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8\001\002\000"
			+ "\056\004\057\005\060\006\062\011\037\030\025\031\016"
			+ "\041\044\042\045\043\053\053\054\057\061\060\056\061"
			+ "\042\062\064\063\055\064\063\065\041\066\050\067\043"
			+ "\070\052\100\040\111\015\001\002\000\004\100\223\001"
			+ "\002\000\004\100\216\001\002\000\004\100\211\001\002"
			+ "\000\056\004\057\005\060\006\062\011\037\030\025\031"
			+ "\016\041\044\042\045\043\053\053\054\057\061\060\056"
			+ "\061\042\062\064\063\055\064\063\065\041\066\050\067"
			+ "\043\070\052\100\040\111\015\001\002\000\054\034\uffa4"
			+ "\035\uffa4\036\uffa4\037\uffa4\040\uffa4\044\uffa4\045\uffa4\046"
			+ "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\055\uffa4"
			+ "\056\uffa4\077\uffa4\101\uffa4\103\uffa4\105\uffa4\106\uffa4\107"
			+ "\uffa4\001\002\000\062\034\uffa2\035\uffa2\036\uffa2\037\uffa2"
			+ "\040\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051"
			+ "\uffa2\052\uffa2\053\uffa2\055\uffa2\056\uffa2\071\202\073\204"
			+ "\074\203\077\uffa2\101\uffa2\103\uffa2\105\uffa2\106\uffa2\107"
			+ "\uffa2\001\002\000\050\034\126\035\143\036\127\037\137"
			+ "\040\132\044\133\045\141\046\135\047\130\050\142\051"
			+ "\144\052\136\053\125\055\140\056\131\077\200\101\uff7a"
			+ "\103\uff7a\105\134\001\002\000\004\100\173\001\002\000"
			+ "\004\103\172\001\002\000\004\100\167\001\002\000\054"
			+ "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\044\uffa3\045"
			+ "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3"
			+ "\055\uffa3\056\uffa3\077\uffa3\101\uffa3\103\uffa3\105\uffa3\106"
			+ "\uffa3\107\uffa3\001\002\000\056\004\057\005\060\006\062"
			+ "\011\037\030\025\031\016\041\044\042\045\043\053\053"
			+ "\054\057\061\060\056\061\042\062\064\063\055\064\063"
			+ "\065\041\066\050\067\043\070\052\100\040\111\015\001"
			+ "\002\000\004\100\117\001\002\000\004\100\112\001\002"
			+ "\000\054\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\044"
			+ "\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f"
			+ "\053\uff7f\055\uff7f\056\uff7f\077\uff7f\101\uff7f\103\uff7f\105"
			+ "\uff7f\106\uff7f\107\uff7f\001\002\000\054\034\uff7e\035\uff7e"
			+ "\036\uff7e\037\uff7e\040\uff7e\044\uff7e\045\uff7e\046\uff7e\047"
			+ "\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\055\uff7e\056\uff7e"
			+ "\077\uff7e\101\uff7e\103\uff7e\105\uff7e\106\uff7e\107\uff7e\001"
			+ "\002\000\004\100\105\001\002\000\054\034\uff7d\035\uff7d"
			+ "\036\uff7d\037\uff7d\040\uff7d\044\uff7d\045\uff7d\046\uff7d\047"
			+ "\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\055\uff7d\056\uff7d"
			+ "\077\uff7d\101\uff7d\103\uff7d\105\uff7d\106\uff7d\107\uff7d\001"
			+ "\002\000\004\100\100\001\002\000\004\100\065\001\002"
			+ "\000\062\004\057\005\060\006\062\011\037\030\025\031"
			+ "\016\032\066\033\071\041\044\042\045\043\053\053\054"
			+ "\057\061\060\056\061\042\062\064\063\055\064\063\065"
			+ "\041\066\050\067\043\070\052\100\040\111\015\001\002"
			+ "\000\004\104\076\001\002\000\004\101\075\001\002\000"
			+ "\004\101\074\001\002\000\004\104\072\001\002\000\012"
			+ "\011\037\030\025\031\016\111\015\001\002\000\004\101"
			+ "\uff7c\001\002\000\054\034\uff89\035\uff89\036\uff89\037\uff89"
			+ "\040\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051"
			+ "\uff89\052\uff89\053\uff89\055\uff89\056\uff89\077\uff89\101\uff89"
			+ "\103\uff89\105\uff89\106\uff89\107\uff89\001\002\000\054\034"
			+ "\uff88\035\uff88\036\uff88\037\uff88\040\uff88\044\uff88\045\uff88"
			+ "\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\055"
			+ "\uff88\056\uff88\077\uff88\101\uff88\103\uff88\105\uff88\106\uff88"
			+ "\107\uff88\001\002\000\012\011\037\030\025\031\016\111"
			+ "\015\001\002\000\004\101\uff7b\001\002\000\006\032\102"
			+ "\033\101\001\002\000\004\101\104\001\002\000\004\101"
			+ "\103\001\002\000\054\034\uff82\035\uff82\036\uff82\037\uff82"
			+ "\040\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051"
			+ "\uff82\052\uff82\053\uff82\055\uff82\056\uff82\077\uff82\101\uff82"
			+ "\103\uff82\105\uff82\106\uff82\107\uff82\001\002\000\054\034"
			+ "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\044\uff83\045\uff83"
			+ "\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83\055"
			+ "\uff83\056\uff83\077\uff83\101\uff83\103\uff83\105\uff83\106\uff83"
			+ "\107\uff83\001\002\000\062\004\057\005\060\006\062\011"
			+ "\037\030\025\031\016\032\066\033\071\041\044\042\045"
			+ "\043\053\053\054\057\061\060\056\061\042\062\064\063"
			+ "\055\064\063\065\041\066\050\067\043\070\052\100\040"
			+ "\111\015\001\002\000\004\101\111\001\002\000\004\101"
			+ "\110\001\002\000\054\034\uff85\035\uff85\036\uff85\037\uff85"
			+ "\040\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051"
			+ "\uff85\052\uff85\053\uff85\055\uff85\056\uff85\077\uff85\101\uff85"
			+ "\103\uff85\105\uff85\106\uff85\107\uff85\001\002\000\054\034"
			+ "\uff84\035\uff84\036\uff84\037\uff84\040\uff84\044\uff84\045\uff84"
			+ "\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\055"
			+ "\uff84\056\uff84\077\uff84\101\uff84\103\uff84\105\uff84\106\uff84"
			+ "\107\uff84\001\002\000\062\004\057\005\060\006\062\011"
			+ "\037\030\025\031\016\032\066\033\071\041\044\042\045"
			+ "\043\053\053\054\057\061\060\056\061\042\062\064\063"
			+ "\055\064\063\065\041\066\050\067\043\070\052\100\040"
			+ "\111\015\001\002\000\004\101\116\001\002\000\004\101"
			+ "\115\001\002\000\054\034\uff87\035\uff87\036\uff87\037\uff87"
			+ "\040\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051"
			+ "\uff87\052\uff87\053\uff87\055\uff87\056\uff87\077\uff87\101\uff87"
			+ "\103\uff87\105\uff87\106\uff87\107\uff87\001\002\000\054\034"
			+ "\uff86\035\uff86\036\uff86\037\uff86\040\uff86\044\uff86\045\uff86"
			+ "\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\055"
			+ "\uff86\056\uff86\077\uff86\101\uff86\103\uff86\105\uff86\106\uff86"
			+ "\107\uff86\001\002\000\062\004\057\005\060\006\062\011"
			+ "\037\030\025\031\016\032\066\033\071\041\044\042\045"
			+ "\043\053\053\054\057\061\060\056\061\042\062\064\063"
			+ "\055\064\063\065\041\066\050\067\043\070\052\100\040"
			+ "\111\015\001\002\000\004\101\123\001\002\000\004\101"
			+ "\122\001\002\000\054\034\uff81\035\uff81\036\uff81\037\uff81"
			+ "\040\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051"
			+ "\uff81\052\uff81\053\uff81\055\uff81\056\uff81\077\uff81\101\uff81"
			+ "\103\uff81\105\uff81\106\uff81\107\uff81\001\002\000\054\034"
			+ "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\044\uff80\045\uff80"
			+ "\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\055"
			+ "\uff80\056\uff80\077\uff80\101\uff80\103\uff80\105\uff80\106\uff80"
			+ "\107\uff80\001\002\000\054\034\uff8e\035\uff8e\036\uff8e\037"
			+ "\uff8e\040\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e"
			+ "\051\uff8e\052\uff8e\053\uff8e\055\uff8e\056\uff8e\077\uff8e\101"
			+ "\uff8e\103\uff8e\105\uff8e\106\uff8e\107\uff8e\001\002\000\056"
			+ "\004\057\005\060\006\062\011\037\030\025\031\016\041"
			+ "\044\042\045\043\053\053\054\057\061\060\056\061\042"
			+ "\062\064\063\055\064\063\065\041\066\050\067\043\070"
			+ "\052\100\040\111\015\001\002\000\056\004\057\005\060"
			+ "\006\062\011\037\030\025\031\016\041\044\042\045\043"
			+ "\053\053\054\057\061\060\056\061\042\062\064\063\055"
			+ "\064\063\065\041\066\050\067\043\070\052\100\040\111"
			+ "\015\001\002\000\056\004\057\005\060\006\062\011\037"
			+ "\030\025\031\016\041\044\042\045\043\053\053\054\057"
			+ "\061\060\056\061\042\062\064\063\055\064\063\065\041"
			+ "\066\050\067\043\070\052\100\040\111\015\001\002\000"
			+ "\056\004\057\005\060\006\062\011\037\030\025\031\016"
			+ "\041\044\042\045\043\053\053\054\057\061\060\056\061"
			+ "\042\062\064\063\055\064\063\065\041\066\050\067\043"
			+ "\070\052\100\040\111\015\001\002\000\056\004\057\005"
			+ "\060\006\062\011\037\030\025\031\016\041\044\042\045"
			+ "\043\053\053\054\057\061\060\056\061\042\062\064\063"
			+ "\055\064\063\065\041\066\050\067\043\070\052\100\040"
			+ "\111\015\001\002\000\056\004\057\005\060\006\062\011"
			+ "\037\030\025\031\016\041\044\042\045\043\053\053\054"
			+ "\057\061\060\056\061\042\062\064\063\055\064\063\065"
			+ "\041\066\050\067\043\070\052\100\040\111\015\001\002"
			+ "\000\056\004\057\005\060\006\062\011\037\030\025\031"
			+ "\016\041\044\042\045\043\053\053\054\057\061\060\056"
			+ "\061\042\062\064\063\055\064\063\065\041\066\050\067"
			+ "\043\070\052\100\040\111\015\001\002\000\056\004\057"
			+ "\005\060\006\062\011\037\030\025\031\016\041\044\042"
			+ "\045\043\053\053\054\057\061\060\056\061\042\062\064"
			+ "\063\055\064\063\065\041\066\050\067\043\070\052\100"
			+ "\040\111\015\001\002\000\056\004\057\005\060\006\062"
			+ "\011\037\030\025\031\016\041\044\042\045\043\053\053"
			+ "\054\057\061\060\056\061\042\062\064\063\055\064\063"
			+ "\065\041\066\050\067\043\070\052\100\040\111\015\001"
			+ "\002\000\056\004\057\005\060\006\062\011\037\030\025"
			+ "\031\016\041\044\042\045\043\053\053\054\057\061\060"
			+ "\056\061\042\062\064\063\055\064\063\065\041\066\050"
			+ "\067\043\070\052\100\040\111\015\001\002\000\056\004"
			+ "\057\005\060\006\062\011\037\030\025\031\016\041\044"
			+ "\042\045\043\053\053\054\057\061\060\056\061\042\062"
			+ "\064\063\055\064\063\065\041\066\050\067\043\070\052"
			+ "\100\040\111\015\001\002\000\056\004\057\005\060\006"
			+ "\062\011\037\030\025\031\016\041\044\042\045\043\053"
			+ "\053\054\057\061\060\056\061\042\062\064\063\055\064"
			+ "\063\065\041\066\050\067\043\070\052\100\040\111\015"
			+ "\001\002\000\056\004\057\005\060\006\062\011\037\030"
			+ "\025\031\016\041\044\042\045\043\053\053\054\057\061"
			+ "\060\056\061\042\062\064\063\055\064\063\065\041\066"
			+ "\050\067\043\070\052\100\040\111\015\001\002\000\056"
			+ "\004\057\005\060\006\062\011\037\030\025\031\016\041"
			+ "\044\042\045\043\053\053\054\057\061\060\056\061\042"
			+ "\062\064\063\055\064\063\065\041\066\050\067\043\070"
			+ "\052\100\040\111\015\001\002\000\056\004\057\005\060"
			+ "\006\062\011\037\030\025\031\016\041\044\042\045\043"
			+ "\053\053\054\057\061\060\056\061\042\062\064\063\055"
			+ "\064\063\065\041\066\050\067\043\070\052\100\040\111"
			+ "\015\001\002\000\056\004\057\005\060\006\062\011\037"
			+ "\030\025\031\016\041\044\042\045\043\053\053\054\057"
			+ "\061\060\056\061\042\062\064\063\055\064\063\065\041"
			+ "\066\050\067\043\070\052\100\040\111\015\001\002\000"
			+ "\044\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\044\uff9d"
			+ "\045\uff9d\052\136\053\125\055\140\056\131\077\uff9d\101"
			+ "\uff9d\103\uff9d\105\uff9d\106\uff9d\107\uff9d\001\002\000\054"
			+ "\034\126\035\uffaa\036\uffaa\037\uffaa\040\uffaa\044\133\045"
			+ "\141\046\135\047\130\050\142\051\144\052\136\053\125"
			+ "\055\140\056\131\077\uffaa\101\uffaa\103\uffaa\105\uffaa\106"
			+ "\uffaa\107\uffaa\001\002\000\044\034\uff9f\035\uff9f\036\uff9f"
			+ "\037\uff9f\040\uff9f\044\uff9f\045\uff9f\052\136\053\125\055"
			+ "\140\056\131\077\uff9f\101\uff9f\103\uff9f\105\uff9f\106\uff9f"
			+ "\107\uff9f\001\002\000\050\034\uffa1\035\uffa1\036\uffa1\037"
			+ "\uffa1\040\uffa1\046\135\047\130\050\142\051\144\052\136"
			+ "\053\125\055\140\056\131\077\uffa1\101\uffa1\103\uffa1\105"
			+ "\uffa1\106\uffa1\107\uffa1\001\002\000\054\034\uff90\035\uff90"
			+ "\036\uff90\037\uff90\040\uff90\044\uff90\045\uff90\046\uff90\047"
			+ "\uff90\050\uff90\051\uff90\052\uff90\053\uff90\055\uff90\056\uff90"
			+ "\077\uff90\101\uff90\103\uff90\105\uff90\106\uff90\107\uff90\001"
			+ "\002\000\054\034\126\035\143\036\uffa9\037\uffa9\040\132"
			+ "\044\133\045\141\046\135\047\130\050\142\051\144\052"
			+ "\136\053\125\055\140\056\131\077\uffa9\101\uffa9\103\uffa9"
			+ "\105\uffa9\106\uffa9\107\uffa9\001\002\000\054\034\uff92\035"
			+ "\uff92\036\uff92\037\uff92\040\uff92\044\uff92\045\uff92\046\uff92"
			+ "\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\055\140\056"
			+ "\131\077\uff92\101\uff92\103\uff92\105\uff92\106\uff92\107\uff92"
			+ "\001\002\000\044\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040"
			+ "\uff9e\044\uff9e\045\uff9e\052\136\053\125\055\140\056\131"
			+ "\077\uff9e\101\uff9e\103\uff9e\105\uff9e\106\uff9e\107\uff9e\001"
			+ "\002\000\044\034\126\035\143\036\127\037\137\040\132"
			+ "\044\133\045\141\046\135\047\130\050\142\051\144\052"
			+ "\136\053\125\055\140\056\131\105\134\106\156\001\002"
			+ "\000\056\004\057\005\060\006\062\011\037\030\025\031"
			+ "\016\041\044\042\045\043\053\053\054\057\061\060\056"
			+ "\061\042\062\064\063\055\064\063\065\041\066\050\067"
			+ "\043\070\052\100\040\111\015\001\002\000\054\034\126"
			+ "\035\143\036\127\037\137\040\132\044\133\045\141\046"
			+ "\135\047\130\050\142\051\144\052\136\053\125\055\140"
			+ "\056\131\077\uff8c\101\uff8c\103\uff8c\105\134\106\uff8c\107"
			+ "\uff8c\001\002\000\050\034\uffa0\035\uffa0\036\uffa0\037\uffa0"
			+ "\040\uffa0\046\135\047\130\050\142\051\144\052\136\053"
			+ "\125\055\140\056\131\077\uffa0\101\uffa0\103\uffa0\105\uffa0"
			+ "\106\uffa0\107\uffa0\001\002\000\052\034\126\035\143\036"
			+ "\uffa7\037\uffa7\044\133\045\141\046\135\047\130\050\142"
			+ "\051\144\052\136\053\125\055\140\056\131\077\uffa7\101"
			+ "\uffa7\103\uffa7\105\uffa7\106\uffa7\107\uffa7\001\002\000\054"
			+ "\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\044\uff8f\045"
			+ "\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f"
			+ "\055\uff8f\056\uff8f\077\uff8f\101\uff8f\103\uff8f\105\uff8f\106"
			+ "\uff8f\107\uff8f\001\002\000\044\034\uff9c\035\uff9c\036\uff9c"
			+ "\037\uff9c\040\uff9c\044\uff9c\045\uff9c\052\136\053\125\055"
			+ "\140\056\131\077\uff9c\101\uff9c\103\uff9c\105\uff9c\106\uff9c"
			+ "\107\uff9c\001\002\000\054\034\126\035\143\036\127\037"
			+ "\137\040\132\044\133\045\141\046\135\047\130\050\142"
			+ "\051\144\052\136\053\125\055\140\056\131\077\uffa8\101"
			+ "\uffa8\103\uffa8\105\uffa8\106\uffa8\107\uffa8\001\002\000\054"
			+ "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\044\133\045"
			+ "\141\046\135\047\130\050\142\051\144\052\136\053\125"
			+ "\055\140\056\131\077\uffab\101\uffab\103\uffab\105\uffab\106"
			+ "\uffab\107\uffab\001\002\000\054\034\uff91\035\uff91\036\uff91"
			+ "\037\uff91\040\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050"
			+ "\uff91\051\uff91\052\uff91\053\uff91\055\140\056\131\077\uff91"
			+ "\101\uff91\103\uff91\105\uff91\106\uff91\107\uff91\001\002\000"
			+ "\056\004\057\005\060\006\062\011\037\030\025\031\016"
			+ "\041\044\042\045\043\053\053\054\057\061\060\056\061"
			+ "\042\062\064\063\055\064\063\065\041\066\050\067\043"
			+ "\070\052\100\040\111\015\001\002\000\044\034\126\035"
			+ "\143\036\127\037\137\040\132\044\133\045\141\046\135"
			+ "\047\130\050\142\051\144\052\136\053\125\055\140\056"
			+ "\131\101\171\105\134\001\002\000\054\034\uff8d\035\uff8d"
			+ "\036\uff8d\037\uff8d\040\uff8d\044\uff8d\045\uff8d\046\uff8d\047"
			+ "\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\055\uff8d\056\uff8d"
			+ "\077\uff8d\101\uff8d\103\uff8d\105\uff8d\106\uff8d\107\uff8d\001"
			+ "\002\000\054\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78"
			+ "\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052"
			+ "\uff78\053\uff78\055\uff78\056\uff78\077\uff78\101\uff78\103\uff78"
			+ "\105\uff78\106\uff78\107\uff78\001\002\000\062\004\057\005"
			+ "\060\006\062\011\037\030\025\031\016\032\066\033\071"
			+ "\041\044\042\045\043\053\053\054\057\061\060\056\061"
			+ "\042\062\064\063\055\064\063\065\041\066\050\067\043"
			+ "\070\052\100\040\111\015\001\002\000\004\101\177\001"
			+ "\002\000\004\101\176\001\002\000\054\034\uff98\035\uff98"
			+ "\036\uff98\037\uff98\040\uff98\044\uff98\045\uff98\046\uff98\047"
			+ "\uff98\050\uff98\051\uff98\052\uff98\053\uff98\055\uff98\056\uff98"
			+ "\077\uff98\101\uff98\103\uff98\105\uff98\106\uff98\107\uff98\001"
			+ "\002\000\054\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97"
			+ "\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052"
			+ "\uff97\053\uff97\055\uff97\056\uff97\077\uff97\101\uff97\103\uff97"
			+ "\105\uff97\106\uff97\107\uff97\001\002\000\056\004\057\005"
			+ "\060\006\062\011\037\030\025\031\016\041\044\042\045"
			+ "\043\053\053\054\057\061\060\056\061\042\062\064\063"
			+ "\055\064\063\065\041\066\050\067\043\070\052\100\040"
			+ "\111\015\001\002\000\006\101\uff79\103\uff79\001\002\000"
			+ "\006\075\033\102\034\001\002\000\012\011\037\030\025"
			+ "\031\016\111\015\001\002\000\012\011\037\030\025\031"
			+ "\016\111\015\001\002\000\054\034\uff94\035\uff94\036\uff94"
			+ "\037\uff94\040\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050"
			+ "\uff94\051\uff94\052\uff94\053\uff94\055\uff94\056\uff94\077\uff94"
			+ "\101\uff94\103\uff94\105\uff94\106\uff94\107\uff94\001\002\000"
			+ "\054\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\044\uff93"
			+ "\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053"
			+ "\uff93\055\uff93\056\uff93\077\uff93\101\uff93\103\uff93\105\uff93"
			+ "\106\uff93\107\uff93\001\002\000\054\034\uff9b\035\uff9b\036"
			+ "\uff9b\037\uff9b\040\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b"
			+ "\050\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b\056\uff9b\077"
			+ "\uff9b\101\uff9b\103\uff9b\105\uff9b\106\uff9b\107\uff9b\001\002"
			+ "\000\054\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\044"
			+ "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6"
			+ "\053\uffa6\055\uffa6\056\uffa6\077\uffa6\101\uffa6\103\uffa6\105"
			+ "\uffa6\106\uffa6\107\uffa6\001\002\000\062\004\057\005\060"
			+ "\006\062\011\037\030\025\031\016\032\066\033\071\041"
			+ "\044\042\045\043\053\053\054\057\061\060\056\061\042"
			+ "\062\064\063\055\064\063\065\041\066\050\067\043\070"
			+ "\052\100\040\111\015\001\002\000\004\101\215\001\002"
			+ "\000\004\101\214\001\002\000\054\034\uff96\035\uff96\036"
			+ "\uff96\037\uff96\040\uff96\044\uff96\045\uff96\046\uff96\047\uff96"
			+ "\050\uff96\051\uff96\052\uff96\053\uff96\055\uff96\056\uff96\077"
			+ "\uff96\101\uff96\103\uff96\105\uff96\106\uff96\107\uff96\001\002"
			+ "\000\054\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\044"
			+ "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95"
			+ "\053\uff95\055\uff95\056\uff95\077\uff95\101\uff95\103\uff95\105"
			+ "\uff95\106\uff95\107\uff95\001\002\000\062\004\057\005\060"
			+ "\006\062\011\037\030\025\031\016\032\066\033\071\041"
			+ "\044\042\045\043\053\053\054\057\061\060\056\061\042"
			+ "\062\064\063\055\064\063\065\041\066\050\067\043\070"
			+ "\052\100\040\111\015\001\002\000\004\101\222\001\002"
			+ "\000\004\101\221\001\002\000\054\034\uff8b\035\uff8b\036"
			+ "\uff8b\037\uff8b\040\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b"
			+ "\050\uff8b\051\uff8b\052\uff8b\053\uff8b\055\uff8b\056\uff8b\077"
			+ "\uff8b\101\uff8b\103\uff8b\105\uff8b\106\uff8b\107\uff8b\001\002"
			+ "\000\054\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\044"
			+ "\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a"
			+ "\053\uff8a\055\uff8a\056\uff8a\077\uff8a\101\uff8a\103\uff8a\105"
			+ "\uff8a\106\uff8a\107\uff8a\001\002\000\062\004\057\005\060"
			+ "\006\062\011\037\030\025\031\016\032\066\033\071\041"
			+ "\044\042\045\043\053\053\054\057\061\060\056\061\042"
			+ "\062\064\063\055\064\063\065\041\066\050\067\043\070"
			+ "\052\100\040\111\015\001\002\000\004\101\227\001\002"
			+ "\000\004\101\226\001\002\000\054\034\uff9a\035\uff9a\036"
			+ "\uff9a\037\uff9a\040\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a"
			+ "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a\056\uff9a\077"
			+ "\uff9a\101\uff9a\103\uff9a\105\uff9a\106\uff9a\107\uff9a\001\002"
			+ "\000\054\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\044"
			+ "\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99"
			+ "\053\uff99\055\uff99\056\uff99\077\uff99\101\uff99\103\uff99\105"
			+ "\uff99\106\uff99\107\uff99\001\002\000\044\034\126\035\143"
			+ "\036\127\037\137\040\132\044\133\045\141\046\135\047"
			+ "\130\050\142\051\144\052\136\053\125\055\140\056\131"
			+ "\101\231\105\134\001\002\000\054\034\uffa5\035\uffa5\036"
			+ "\uffa5\037\uffa5\040\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5"
			+ "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\055\uffa5\056\uffa5\077"
			+ "\uffa5\101\uffa5\103\uffa5\105\uffa5\106\uffa5\107\uffa5\001\002"
			+ "\000\006\076\uff74\104\uff74\001\002\000\006\076\uff76\104"
			+ "\uff76\001\002\000\006\076\uff75\104\uff75\001\002\000\004"
			+ "\104\237\001\002\000\006\076\uff73\104\uff73\001\002\000"
			+ "\004\104\240\001\002\000\012\004\232\005\233\006\234"
			+ "\055\236\001\002\000\004\076\242\001\002\000\054\034"
			+ "\uff77\035\uff77\036\uff77\037\uff77\040\uff77\044\uff77\045\uff77"
			+ "\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\055"
			+ "\uff77\056\uff77\077\uff77\101\uff77\103\uff77\105\uff77\106\uff77"
			+ "\107\uff77\001\002\000\004\107\244\001\002\000\032\002"
			+ "\ufff4\011\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4"
			+ "\023\ufff4\030\ufff4\031\ufff4\103\ufff4\111\ufff4\001\002\000"
			+ "\004\071\246\001\002\000\006\075\033\102\034\001\002"
			+ "\000\004\107\250\001\002\000\032\002\ufff7\011\ufff7\014"
			+ "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\023\ufff7\030\ufff7"
			+ "\031\ufff7\103\ufff7\111\ufff7\001\002\000\004\111\266\001"
			+ "\002\000\004\111\261\001\002\000\004\111\254\001\002"
			+ "\000\006\004\256\005\255\001\002\000\004\107\260\001"
			+ "\002\000\004\107\257\001\002\000\030\002\uffed\011\uffed"
			+ "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\023\uffed\030"
			+ "\uffed\031\uffed\111\uffed\001\002\000\030\002\uffee\011\uffee"
			+ "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\023\uffee\030"
			+ "\uffee\031\uffee\111\uffee\001\002\000\006\004\262\006\263"
			+ "\001\002\000\004\107\265\001\002\000\004\107\264\001"
			+ "\002\000\030\002\uffec\011\uffec\014\uffec\015\uffec\016\uffec"
			+ "\017\uffec\020\uffec\023\uffec\030\uffec\031\uffec\111\uffec\001"
			+ "\002\000\030\002\uffeb\011\uffeb\014\uffeb\015\uffeb\016\uffeb"
			+ "\017\uffeb\020\uffeb\023\uffeb\030\uffeb\031\uffeb\111\uffeb\001"
			+ "\002\000\006\042\267\043\270\001\002\000\004\107\272"
			+ "\001\002\000\004\107\271\001\002\000\030\002\uffe9\011"
			+ "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\023\uffe9"
			+ "\030\uffe9\031\uffe9\111\uffe9\001\002\000\030\002\uffea\011"
			+ "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\023\uffea"
			+ "\030\uffea\031\uffea\111\uffea\001\002\000\012\011\037\030"
			+ "\025\031\016\111\015\001\002\000\076\024\uffe3\025\uffe3"
			+ "\026\uffe3\027\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040"
			+ "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3"
			+ "\052\uffe3\053\uffe3\055\uffe3\056\uffe3\071\uffe3\073\uffe3\074"
			+ "\uffe3\075\uffe3\077\uffe3\101\uffe3\102\uffe3\103\uffe3\105\uffe3"
			+ "\106\uffe3\107\uffe3\001\002\000\004\102\uffc8\001\002\000"
			+ "\012\004\u0137\005\u0136\055\u013a\111\u0138\001\002\000\004"
			+ "\102\u0133\001\002\000\034\002\uffdf\011\uffdf\014\uffdf\015"
			+ "\uffdf\016\uffdf\017\uffdf\020\uffdf\023\uffdf\030\uffdf\031\uffdf"
			+ "\077\uffdf\103\uffdf\111\uffdf\001\002\000\004\102\uffc9\001"
			+ "\002\000\004\102\uffca\001\002\000\100\004\057\005\060"
			+ "\006\062\011\037\014\334\015\331\016\343\020\342\021"
			+ "\332\022\350\024\304\030\025\031\016\041\044\042\045"
			+ "\043\053\053\054\057\061\060\056\061\042\062\064\063"
			+ "\055\064\063\065\041\066\050\067\043\070\052\100\040"
			+ "\103\uffdc\110\333\111\336\001\002\000\012\025\302\026"
			+ "\301\027\275\075\276\001\002\000\004\102\306\001\002"
			+ "\000\020\010\311\011\004\012\313\013\307\030\025\031"
			+ "\016\111\015\001\002\000\012\011\004\030\025\031\016"
			+ "\111\015\001\002\000\022\024\304\025\302\026\301\027"
			+ "\275\075\276\077\uffcb\102\303\103\uffcb\001\002\000\012"
			+ "\011\037\030\025\031\016\111\015\001\002\000\006\077"
			+ "\324\103\uffd5\001\002\000\014\011\004\013\321\030\025"
			+ "\031\016\111\015\001\002\000\006\077\uffd3\103\uffd3\001"
			+ "\002\000\004\103\316\001\002\000\110\002\uffd6\004\uffd6"
			+ "\005\uffd6\006\uffd6\011\uffd6\014\uffd6\015\uffd6\016\uffd6\017"
			+ "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\030\uffd6"
			+ "\031\uffd6\041\uffd6\042\uffd6\043\uffd6\053\uffd6\057\uffd6\060"
			+ "\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6"
			+ "\067\uffd6\070\uffd6\077\uffd6\100\uffd6\103\uffd6\110\uffd6\111"
			+ "\uffd6\001\002\000\012\024\304\077\uffce\102\303\103\uffce"
			+ "\001\002\000\006\077\uffd2\103\uffd2\001\002\000\012\011"
			+ "\004\030\025\031\016\111\015\001\002\000\012\024\304"
			+ "\077\uffcc\102\303\103\uffcc\001\002\000\006\077\uffd0\103"
			+ "\uffd0\001\002\000\020\010\311\011\004\012\313\013\307"
			+ "\030\025\031\016\111\015\001\002\000\004\103\uffd4\001"
			+ "\002\000\006\077\uffcf\103\uffcf\001\002\000\012\024\304"
			+ "\077\uffcd\102\303\103\uffcd\001\002\000\006\077\uffd1\103"
			+ "\uffd1\001\002\000\004\111\u0130\001\002\000\004\106\u012d"
			+ "\001\002\000\004\102\u0125\001\002\000\004\111\u0122\001"
			+ "\002\000\100\004\057\005\060\006\062\011\037\014\334"
			+ "\015\331\016\343\020\342\021\332\022\350\024\304\030"
			+ "\025\031\016\041\044\042\045\043\053\053\054\057\061"
			+ "\060\056\061\042\062\064\063\055\064\063\065\041\066"
			+ "\050\067\043\070\052\100\040\103\uffdc\110\333\111\336"
			+ "\001\002\000\056\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040"
			+ "\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5"
			+ "\052\uffe5\053\uffe5\055\uffe5\056\uffe5\071\uffe5\073\uffe5\074"
			+ "\uffe5\104\uffe5\105\uffe5\107\uffe5\111\u0116\001\002\000\044"
			+ "\034\126\035\143\036\127\037\137\040\132\044\133\045"
			+ "\141\046\135\047\130\050\142\051\144\052\136\053\125"
			+ "\055\140\056\131\105\134\107\u0115\001\002\000\100\004"
			+ "\uffd8\005\uffd8\006\uffd8\011\uffd8\014\uffd8\015\uffd8\016\uffd8"
			+ "\020\uffd8\021\uffd8\022\uffd8\024\uffd8\030\uffd8\031\uffd8\041"
			+ "\uffd8\042\uffd8\043\uffd8\053\uffd8\057\uffd8\060\uffd8\061\uffd8"
			+ "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070"
			+ "\uffd8\100\uffd8\103\uffd8\110\uffd8\111\uffd8\001\002\000\004"
			+ "\103\u0114\001\002\000\004\111\u0111\001\002\000\004\111"
			+ "\354\001\002\000\100\004\uffd7\005\uffd7\006\uffd7\011\uffd7"
			+ "\014\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\022\uffd7\024"
			+ "\uffd7\030\uffd7\031\uffd7\041\uffd7\042\uffd7\043\uffd7\053\uffd7"
			+ "\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065"
			+ "\uffd7\066\uffd7\067\uffd7\070\uffd7\100\uffd7\103\uffd7\110\uffd7"
			+ "\111\uffd7\001\002\000\100\004\uffc2\005\uffc2\006\uffc2\011"
			+ "\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\021\uffc2\022\uffc2"
			+ "\024\uffc2\030\uffc2\031\uffc2\041\uffc2\042\uffc2\043\uffc2\053"
			+ "\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2"
			+ "\065\uffc2\066\uffc2\067\uffc2\070\uffc2\100\uffc2\103\uffc2\110"
			+ "\uffc2\111\uffc2\001\002\000\100\004\uffda\005\uffda\006\uffda"
			+ "\011\uffda\014\uffda\015\uffda\016\uffda\020\uffda\021\uffda\022"
			+ "\uffda\024\uffda\030\uffda\031\uffda\041\uffda\042\uffda\043\uffda"
			+ "\053\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064"
			+ "\uffda\065\uffda\066\uffda\067\uffda\070\uffda\100\uffda\103\uffda"
			+ "\110\uffda\111\uffda\001\002\000\100\004\uffd9\005\uffd9\006"
			+ "\uffd9\011\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9"
			+ "\022\uffd9\024\uffd9\030\uffd9\031\uffd9\041\uffd9\042\uffd9\043"
			+ "\uffd9\053\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9"
			+ "\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\100\uffd9\103"
			+ "\uffd9\110\uffd9\111\uffd9\001\002\000\004\106\351\001\002"
			+ "\000\056\004\057\005\060\006\062\011\037\030\025\031"
			+ "\016\041\044\042\045\043\053\053\054\057\061\060\056"
			+ "\061\042\062\064\063\055\064\063\065\041\066\050\067"
			+ "\043\070\052\100\040\111\015\001\002\000\044\034\126"
			+ "\035\143\036\127\037\137\040\132\044\133\045\141\046"
			+ "\135\047\130\050\142\051\144\052\136\053\125\055\140"
			+ "\056\131\105\134\107\353\001\002\000\100\004\uff71\005"
			+ "\uff71\006\uff71\011\uff71\014\uff71\015\uff71\016\uff71\020\uff71"
			+ "\021\uff71\022\uff71\024\uff71\030\uff71\031\uff71\041\uff71\042"
			+ "\uff71\043\uff71\053\uff71\057\uff71\060\uff71\061\uff71\062\uff71"
			+ "\063\uff71\064\uff71\065\uff71\066\uff71\067\uff71\070\uff71\100"
			+ "\uff71\103\uff71\110\uff71\111\uff71\001\002\000\012\071\356"
			+ "\072\360\077\355\107\uffbb\001\002\000\006\021\367\022"
			+ "\366\001\002\000\006\075\033\102\034\001\002\000\004"
			+ "\107\362\001\002\000\056\004\057\005\060\006\062\011"
			+ "\037\030\025\031\016\041\044\042\045\043\053\053\054"
			+ "\057\061\060\056\061\042\062\064\063\055\064\063\065"
			+ "\041\066\050\067\043\070\052\100\040\111\015\001\002"
			+ "\000\044\034\126\035\143\036\127\037\137\040\132\044"
			+ "\133\045\141\046\135\047\130\050\142\051\144\052\136"
			+ "\053\125\055\140\056\131\105\134\107\uffba\001\002\000"
			+ "\100\004\uffbd\005\uffbd\006\uffbd\011\uffbd\014\uffbd\015\uffbd"
			+ "\016\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\030\uffbd\031"
			+ "\uffbd\041\uffbd\042\uffbd\043\uffbd\053\uffbd\057\uffbd\060\uffbd"
			+ "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067"
			+ "\uffbd\070\uffbd\100\uffbd\103\uffbd\110\uffbd\111\uffbd\001\002"
			+ "\000\006\077\364\107\uffb8\001\002\000\006\021\367\022"
			+ "\366\001\002\000\004\107\uffb9\001\002\000\004\106\u010b"
			+ "\001\002\000\004\106\370\001\002\000\006\071\371\072"
			+ "\372\001\002\000\006\075\033\102\034\001\002\000\056"
			+ "\004\057\005\060\006\062\011\037\030\025\031\016\041"
			+ "\044\042\045\043\053\053\054\057\061\060\056\061\042"
			+ "\062\064\063\055\064\063\065\041\066\050\067\043\070"
			+ "\052\100\040\111\015\001\002\000\046\034\126\035\143"
			+ "\036\127\037\137\040\132\044\133\045\141\046\135\047"
			+ "\130\050\142\051\144\052\136\053\125\055\140\056\131"
			+ "\077\374\105\134\107\uffb2\001\002\000\004\022\375\001"
			+ "\002\000\004\106\376\001\002\000\006\071\377\072\u0100"
			+ "\001\002\000\006\075\033\102\034\001\002\000\056\004"
			+ "\057\005\060\006\062\011\037\030\025\031\016\041\044"
			+ "\042\045\043\053\053\054\057\061\060\056\061\042\062"
			+ "\064\063\055\064\063\065\041\066\050\067\043\070\052"
			+ "\100\040\111\015\001\002\000\044\034\126\035\143\036"
			+ "\127\037\137\040\132\044\133\045\141\046\135\047\130"
			+ "\050\142\051\144\052\136\053\125\055\140\056\131\105"
			+ "\134\107\uffb6\001\002\000\004\107\uffb5\001\002\000\006"
			+ "\077\u0104\107\uffb1\001\002\000\004\022\u0105\001\002\000"
			+ "\004\106\u0106\001\002\000\006\071\u0107\072\u0108\001\002"
			+ "\000\006\075\033\102\034\001\002\000\056\004\057\005"
			+ "\060\006\062\011\037\030\025\031\016\041\044\042\045"
			+ "\043\053\053\054\057\061\060\056\061\042\062\064\063"
			+ "\055\064\063\065\041\066\050\067\043\070\052\100\040"
			+ "\111\015\001\002\000\044\034\126\035\143\036\127\037"
			+ "\137\040\132\044\133\045\141\046\135\047\130\050\142"
			+ "\051\144\052\136\053\125\055\140\056\131\105\134\107"
			+ "\uffb4\001\002\000\004\107\uffb3\001\002\000\006\071\u010c"
			+ "\072\u010d\001\002\000\006\075\033\102\034\001\002\000"
			+ "\056\004\057\005\060\006\062\011\037\030\025\031\016"
			+ "\041\044\042\045\043\053\053\054\057\061\060\056\061"
			+ "\042\062\064\063\055\064\063\065\041\066\050\067\043"
			+ "\070\052\100\040\111\015\001\002\000\044\034\126\035"
			+ "\143\036\127\037\137\040\132\044\133\045\141\046\135"
			+ "\047\130\050\142\051\144\052\136\053\125\055\140\056"
			+ "\131\105\134\107\uffb0\001\002\000\004\107\uffaf\001\002"
			+ "\000\004\107\uffb7\001\002\000\012\071\356\072\360\077"
			+ "\355\107\uffbb\001\002\000\004\107\u0113\001\002\000\100"
			+ "\004\uffbf\005\uffbf\006\uffbf\011\uffbf\014\uffbf\015\uffbf\016"
			+ "\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf\030\uffbf\031\uffbf"
			+ "\041\uffbf\042\uffbf\043\uffbf\053\uffbf\057\uffbf\060\uffbf\061"
			+ "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf"
			+ "\070\uffbf\100\uffbf\103\uffbf\110\uffbf\111\uffbf\001\002\000"
			+ "\034\002\uffe0\011\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0"
			+ "\020\uffe0\023\uffe0\030\uffe0\031\uffe0\077\uffe0\103\uffe0\111"
			+ "\uffe0\001\002\000\100\004\uff70\005\uff70\006\uff70\011\uff70"
			+ "\014\uff70\015\uff70\016\uff70\020\uff70\021\uff70\022\uff70\024"
			+ "\uff70\030\uff70\031\uff70\041\uff70\042\uff70\043\uff70\053\uff70"
			+ "\057\uff70\060\uff70\061\uff70\062\uff70\063\uff70\064\uff70\065"
			+ "\uff70\066\uff70\067\uff70\070\uff70\100\uff70\103\uff70\110\uff70"
			+ "\111\uff70\001\002\000\014\071\356\072\360\077\355\102"
			+ "\u0118\107\uffbb\001\002\000\004\107\u0120\001\002\000\004"
			+ "\111\u0119\001\002\000\012\071\356\072\360\077\355\107"
			+ "\uffbb\001\002\000\006\103\uffae\111\u0119\001\002\000\004"
			+ "\103\u011c\001\002\000\100\004\uffc1\005\uffc1\006\uffc1\011"
			+ "\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1"
			+ "\024\uffc1\030\uffc1\031\uffc1\041\uffc1\042\uffc1\043\uffc1\053"
			+ "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1"
			+ "\065\uffc1\066\uffc1\067\uffc1\070\uffc1\100\uffc1\103\uffc1\110"
			+ "\uffc1\111\uffc1\001\002\000\004\103\uffad\001\002\000\004"
			+ "\107\u011f\001\002\000\006\103\uffac\111\uffac\001\002\000"
			+ "\100\004\uffbc\005\uffbc\006\uffbc\011\uffbc\014\uffbc\015\uffbc"
			+ "\016\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\030\uffbc\031"
			+ "\uffbc\041\uffbc\042\uffbc\043\uffbc\053\uffbc\057\uffbc\060\uffbc"
			+ "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067"
			+ "\uffbc\070\uffbc\100\uffbc\103\uffbc\110\uffbc\111\uffbc\001\002"
			+ "\000\004\103\uffdb\001\002\000\012\071\356\072\360\077"
			+ "\355\107\uffbb\001\002\000\004\107\u0124\001\002\000\100"
			+ "\004\uffbe\005\uffbe\006\uffbe\011\uffbe\014\uffbe\015\uffbe\016"
			+ "\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\030\uffbe\031\uffbe"
			+ "\041\uffbe\042\uffbe\043\uffbe\053\uffbe\057\uffbe\060\uffbe\061"
			+ "\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe"
			+ "\070\uffbe\100\uffbe\103\uffbe\110\uffbe\111\uffbe\001\002\000"
			+ "\004\007\u0126\001\002\000\004\007\u012c\001\002\000\006"
			+ "\103\uff6e\107\u012a\001\002\000\004\103\u0129\001\002\000"
			+ "\100\004\uff6f\005\uff6f\006\uff6f\011\uff6f\014\uff6f\015\uff6f"
			+ "\016\uff6f\020\uff6f\021\uff6f\022\uff6f\024\uff6f\030\uff6f\031"
			+ "\uff6f\041\uff6f\042\uff6f\043\uff6f\053\uff6f\057\uff6f\060\uff6f"
			+ "\061\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067"
			+ "\uff6f\070\uff6f\100\uff6f\103\uff6f\110\uff6f\111\uff6f\001\002"
			+ "\000\004\007\u0126\001\002\000\004\103\uff6d\001\002\000"
			+ "\006\103\uff6c\107\uff6c\001\002\000\056\004\057\005\060"
			+ "\006\062\011\037\030\025\031\016\041\044\042\045\043"
			+ "\053\053\054\057\061\060\056\061\042\062\064\063\055"
			+ "\064\063\065\041\066\050\067\043\070\052\100\040\111"
			+ "\015\001\002\000\044\034\126\035\143\036\127\037\137"
			+ "\040\132\044\133\045\141\046\135\047\130\050\142\051"
			+ "\144\052\136\053\125\055\140\056\131\105\134\107\u012f"
			+ "\001\002\000\100\004\uff72\005\uff72\006\uff72\011\uff72\014"
			+ "\uff72\015\uff72\016\uff72\020\uff72\021\uff72\022\uff72\024\uff72"
			+ "\030\uff72\031\uff72\041\uff72\042\uff72\043\uff72\053\uff72\057"
			+ "\uff72\060\uff72\061\uff72\062\uff72\063\uff72\064\uff72\065\uff72"
			+ "\066\uff72\067\uff72\070\uff72\100\uff72\103\uff72\110\uff72\111"
			+ "\uff72\001\002\000\012\071\356\072\360\077\355\107\uffbb"
			+ "\001\002\000\004\107\u0132\001\002\000\100\004\uffc0\005"
			+ "\uffc0\006\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0"
			+ "\021\uffc0\022\uffc0\024\uffc0\030\uffc0\031\uffc0\041\uffc0\042"
			+ "\uffc0\043\uffc0\053\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0"
			+ "\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\100"
			+ "\uffc0\103\uffc0\110\uffc0\111\uffc0\001\002\000\100\004\057"
			+ "\005\060\006\062\011\037\014\334\015\331\016\343\020"
			+ "\342\021\332\022\350\024\304\030\025\031\016\041\044"
			+ "\042\045\043\053\053\054\057\061\060\056\061\042\062"
			+ "\064\063\055\064\063\065\041\066\050\067\043\070\052"
			+ "\100\040\103\uffdc\110\333\111\336\001\002\000\004\103"
			+ "\u0135\001\002\000\034\002\uffe1\011\uffe1\014\uffe1\015\uffe1"
			+ "\016\uffe1\017\uffe1\020\uffe1\023\uffe1\030\uffe1\031\uffe1\077"
			+ "\uffe1\103\uffe1\111\uffe1\001\002\000\006\076\uffc4\104\uffc4"
			+ "\001\002\000\006\076\uffc6\104\uffc6\001\002\000\006\076"
			+ "\uffc3\104\uffc3\001\002\000\004\104\u013b\001\002\000\006"
			+ "\076\uffc5\104\uffc5\001\002\000\004\104\u013c\001\002\000"
			+ "\012\004\u0137\005\u0136\055\u013a\111\u0138\001\002\000\004"
			+ "\076\u013e\001\002\000\004\102\uffc7\001\002\000\004\002"
			+ "\001\001\002\000\006\071\u0141\107\u0142\001\002\000\006"
			+ "\075\033\102\034\001\002\000\032\002\ufff6\011\ufff6\014"
			+ "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\023\ufff6\030\ufff6"
			+ "\031\ufff6\103\ufff6\111\ufff6\001\002\000\004\107\u0144\001"
			+ "\002\000\032\002\ufff9\011\ufff9\014\ufff9\015\ufff9\016\ufff9"
			+ "\017\ufff9\020\ufff9\023\ufff9\030\ufff9\031\ufff9\103\ufff9\111"
			+ "\ufff9\001\002\000\004\002\uffff\001\002\000\004\102\u0147"
			+ "\001\002\000\014\014\024\015\011\016\023\020\027\111"
			+ "\u0148\001\002\000\004\111\u014e\001\002\000\016\014\ufff0"
			+ "\015\ufff0\016\ufff0\020\ufff0\103\ufff0\111\ufff0\001\002\000"
			+ "\004\103\u014d\001\002\000\016\014\024\015\011\016\023"
			+ "\020\027\103\ufff2\111\u0148\001\002\000\004\103\ufff1\001"
			+ "\002\000\030\002\ufff3\011\ufff3\014\ufff3\015\ufff3\016\ufff3"
			+ "\017\ufff3\020\ufff3\023\ufff3\030\ufff3\031\ufff3\111\ufff3\001"
			+ "\002\000\004\107\u014f\001\002\000\016\014\uffef\015\uffef"
			+ "\016\uffef\020\uffef\103\uffef\111\uffef\001\002\000\006\024"
			+ "\304\102\u0152\001\002\000\034\002\uffdd\011\uffdd\014\uffdd"
			+ "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd\030\uffdd\031"
			+ "\uffdd\077\uffdd\103\uffdd\111\uffdd\001\002\000\100\004\057"
			+ "\005\060\006\062\011\037\014\334\015\331\016\343\020"
			+ "\342\021\332\022\350\024\304\030\025\031\016\041\044"
			+ "\042\045\043\053\053\054\057\061\060\056\061\042\062"
			+ "\064\063\055\064\063\065\041\066\050\067\043\070\052"
			+ "\100\040\103\uffdc\110\333\111\336\001\002\000\004\103"
			+ "\u0154\001\002\000\034\002\uffde\011\uffde\014\uffde\015\uffde"
			+ "\016\uffde\017\uffde\020\uffde\023\uffde\030\uffde\031\uffde\077" + "\uffde\103\uffde\111\uffde\001\002" });

	/** Access to parse-action table. */
	@Override
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\u0152\000\026\002\011\003\007\004\006\005\012\006"
			+ "\016\007\005\012\020\013\017\014\013\015\025\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\026\002\u0144\003\007\004\006\005\012"
			+ "\006\016\007\005\012\020\013\017\014\013\015\025\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\006\020\276\024\277\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\004\035\034\001\001\000\002\001"
			+ "\001\000\004\037\234\001\001\000\012\012\020\013\045"
			+ "\033\046\034\050\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\010\012\020\013\045\033\227"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\010\012\020\013\045\033\207\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\010\012\020\013\045\033\123\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\014\012\020\013\045\033\046\034\067"
			+ "\036\066\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\006\012\020\013\072"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\006\012\020\013\076\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\014\012\020\013\045"
			+ "\033\046\034\106\036\105\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\014"
			+ "\012\020\013\045\033\046\034\113\036\112\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\014\012\020\013\045\033\046\034\120\036"
			+ "\117\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\010\012"
			+ "\020\013\045\033\165\001\001\000\010\012\020\013\045"
			+ "\033\164\001\001\000\010\012\020\013\045\033\163\001"
			+ "\001\000\010\012\020\013\045\033\162\001\001\000\010"
			+ "\012\020\013\045\033\161\001\001\000\010\012\020\013"
			+ "\045\033\160\001\001\000\010\012\020\013\045\033\157"
			+ "\001\001\000\010\012\020\013\045\033\154\001\001\000"
			+ "\010\012\020\013\045\033\153\001\001\000\010\012\020"
			+ "\013\045\033\152\001\001\000\010\012\020\013\045\033"
			+ "\151\001\001\000\010\012\020\013\045\033\150\001\001"
			+ "\000\010\012\020\013\045\033\147\001\001\000\010\012"
			+ "\020\013\045\033\146\001\001\000\010\012\020\013\045"
			+ "\033\145\001\001\000\010\012\020\013\045\033\144\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\010"
			+ "\012\020\013\045\033\156\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\010\012\020\013\045\033\167\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\014\012"
			+ "\020\013\045\033\046\034\174\036\173\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\012\012\020\013\045\033\046\034\200\001\001"
			+ "\000\002\001\001\000\004\035\206\001\001\000\006\012"
			+ "\020\013\205\001\001\000\006\012\020\013\204\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\014\012\020\013\045\033\046\034\212"
			+ "\036\211\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\014\012\020\013\045"
			+ "\033\046\034\217\036\216\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\014"
			+ "\012\020\013\045\033\046\034\224\036\223\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\004\037\240\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\004\035\246\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\006\012\020\013\273\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\021\u0138\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\026\012\020\013\045\022\340\023\334\024"
			+ "\343\025\337\026\344\033\336\040\346\041\345\001\001"
			+ "\000\004\020\304\001\001\000\002\001\001\000\016\012"
			+ "\020\013\307\014\313\015\025\016\314\017\311\001\001"
			+ "\000\010\012\020\013\326\015\327\001\001\000\006\020"
			+ "\276\024\277\001\001\000\006\012\020\013\325\001\001"
			+ "\000\002\001\001\000\010\012\020\013\316\015\317\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\024\277\001\001\000\002\001\001\000\010\012"
			+ "\020\013\321\015\322\001\001\000\004\024\277\001\001"
			+ "\000\002\001\001\000\016\012\020\013\307\014\313\015"
			+ "\025\016\324\017\311\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\024\277\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\026\012\020\013\045\022\u0120\023\334\024"
			+ "\343\025\337\026\344\033\336\040\346\041\345\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\010\012\020\013\045\033\351"
			+ "\001\001\000\002\001\001\000\002\001\001\000\004\027"
			+ "\356\001\001\000\004\030\u010f\001\001\000\004\035\362"
			+ "\001\001\000\002\001\001\000\010\012\020\013\045\033"
			+ "\360\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\030\364\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\035\u0102\001\001\000\010\012\020\013\045\033\372\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\004\035\u0101\001\001\000\010\012"
			+ "\020\013\045\033\u0100\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\004\035\u0109\001\001\000\010"
			+ "\012\020\013\045\033\u0108\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\004\035\u010e\001\001"
			+ "\000\010\012\020\013\045\033\u010d\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\004\027\u0111"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\004\027\u0116\001\001\000\002"
			+ "\001\001\000\006\031\u011a\032\u0119\001\001\000\004\027"
			+ "\u011d\001\001\000\006\031\u011c\032\u0119\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\027\u0122\001\001\000\002\001\001\000\002\001"
			+ "\001\000\006\042\u0127\043\u0126\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\006\042\u012a\043\u0126\001\001\000\002\001\001\000\002"
			+ "\001\001\000\010\012\020\013\045\033\u012d\001\001\000"
			+ "\002\001\001\000\002\001\001\000\004\027\u0130\001\001"
			+ "\000\002\001\001\000\002\001\001\000\026\012\020\013"
			+ "\045\022\u0133\023\334\024\343\025\337\026\344\033\336"
			+ "\040\346\041\345\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\021\u013c\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\004\035\u0142\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\010\006\u0148\010"
			+ "\u0149\011\u014a\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\010\006\u0148\010\u014b\011\u014a\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\004\024\u0150\001\001\000\002\001"
			+ "\001\000\026\012\020\013\045\022\u0152\023\334\024\343"
			+ "\025\337\026\344\033\336\040\346\041\345\001\001\000" + "\002\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	@Override
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$parser$actions action_obj;

	/** Action encapsulation object initializer. */
	@Override
	protected void init_actions() {
		action_obj = new CUP$parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	@Override
	public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack,
			int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	@Override
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	@Override
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	@Override
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	@Override
	public int error_sym() {
		return 1;
	}

	private FeaturesSymbolTable featuresSymbolTable = new FeaturesSymbolTable();

	public FeaturesSymbolTable getFeaturesSymbolTable() {
		return this.featuresSymbolTable;
	}

	@Override
	public void report_fatal_error(String message, Object info) throws Exception {
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				message = message + " in line " + (s.left + 1);
				if (s.right >= 0)
					message = message + ", column " + (s.right + 1);
			}
		}
		throw new Exception("Parsing error : " + message);
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$parser$actions {
	private final parser parser;

	/** Constructor */
	CUP$parser$actions(parser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$parser$do_action(int CUP$parser$act_num,
			java_cup.runtime.lr_parser CUP$parser$parser, java.util.Stack CUP$parser$stack, int CUP$parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$parser$result;

		/* select the action based on the action number */
		switch (CUP$parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 149: // data_pair ::= STRING STRING
		{
			DataPair RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new DataPair(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("data_pair", 33,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 148: // data_pair_list ::= data_pair SEMICOLON data_pair_list
		{
			DataPairList RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			DataPair e1 = (DataPair) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			DataPairList e2 = (DataPairList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new DataPairList(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("data_pair_list", 32,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 147: // data_pair_list ::= data_pair
		{
			DataPairList RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			DataPair e1 = (DataPair) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new DataPairList(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("data_pair_list", 32,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 146: // data ::= DATA CBRA data_pair_list CBRAEND
		{
			Data RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			DataPairList e1 = (DataPairList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Data(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("data", 31,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 145: // constraint ::= expression SEMICOLON
		{
			Constraint RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Constraint(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint", 30,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 144: // constraint ::= IFOUT COLON expression SEMICOLON
		{
			Constraint RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Constraint(false, e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint", 30,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 143: // constraint ::= IFIN COLON expression SEMICOLON
		{
			Constraint RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Constraint(true, e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint", 30,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 142: // set_expression_bound ::= TIMES
		{
			String RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object e1 = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = "*";
			CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expression_bound", 29,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 141: // set_expression_bound ::= ZERO
		{
			String RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object e1 = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = "0";
			CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expression_bound", 29,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 140: // set_expression_bound ::= REAL
		{
			String RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expression_bound", 29,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 139: // set_expression_bound ::= INTEGER
		{
			String RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expression_bound", 29,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 138: // set_expression ::= SQBRA set_expression_bound DOT DOT
					// set_expression_bound SQBRAEND
		{
			SetExpression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SetExpression(e1, e2, parser.getFeaturesSymbolTable());
			CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expression", 27,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 137: // set_expression ::= CBRA expression_list CBRAEND
		{
			SetExpression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ExpressionList e1 = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SetExpression(e1, parser.getFeaturesSymbolTable());
			CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expression", 27,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 136: // expression_list ::= expression COMMA expression_list
		{
			ExpressionList RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			ExpressionList e2 = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new ExpressionList(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list", 26,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 135: // expression_list ::= expression
		{
			ExpressionList RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new ExpressionList(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list", 26,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 134: // children_attribute_id ::= CHILDREN DOT long_id
		{
			ChildrenAttributeID RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new ChildrenAttributeID(ChildrenAttributeID.CHILDREN, e1, parser.getFeaturesSymbolTable());
			CUP$parser$result = parser.getSymbolFactory().newSymbol("children_attribute_id", 28,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 133: // children_attribute_id ::= SCHILDREN DOT long_id
		{
			ChildrenAttributeID RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new ChildrenAttributeID(ChildrenAttributeID.SELECTED_CHILDREN, e1, parser.getFeaturesSymbolTable());
			CUP$parser$result = parser.getSymbolFactory().newSymbol("children_attribute_id", 28,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 132: // expression ::= REAL
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new RealExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 131: // expression ::= INTEGER
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new IntExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 130: // expression ::= ZERO
		{
			Expression RESULT = null;
			RESULT = new ZeroExpression();
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 129: // expression ::= AVG BRA children_attribute_id BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ChildrenAttributeID e1 = (ChildrenAttributeID) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new AvgAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 128: // expression ::= AVG BRA expression_list BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ExpressionList e1 = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new AvgAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 127: // expression ::= COUNT BRA CHILDREN BRAEND
		{
			Expression RESULT = null;
			RESULT = new CountAggExpression(ChildrenAttributeID.CHILDREN, parser.getFeaturesSymbolTable());
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 126: // expression ::= COUNT BRA SCHILDREN BRAEND
		{
			Expression RESULT = null;
			RESULT = new CountAggExpression(ChildrenAttributeID.SELECTED_CHILDREN, parser.getFeaturesSymbolTable());
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 125: // expression ::= MAX BRA children_attribute_id BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ChildrenAttributeID e1 = (ChildrenAttributeID) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new MaxAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 124: // expression ::= MAX BRA expression_list BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ExpressionList e1 = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new MaxAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 123: // expression ::= MIN BRA children_attribute_id BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ChildrenAttributeID e1 = (ChildrenAttributeID) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new MinAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 122: // expression ::= MIN BRA expression_list BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ExpressionList e1 = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new MinAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 121: // expression ::= MUL BRA children_attribute_id BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ChildrenAttributeID e1 = (ChildrenAttributeID) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new MulAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 120: // expression ::= MUL BRA expression_list BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ExpressionList e1 = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new MulAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 119: // expression ::= SUM BRA children_attribute_id BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ChildrenAttributeID e1 = (ChildrenAttributeID) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SumAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 118: // expression ::= SUM BRA expression_list BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ExpressionList e1 = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SumAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 117: // expression ::= expression QUEST expression COLON expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e3left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e3right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e3 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new QuestExpression(e1, e2, e3);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 116: // expression ::= ABS BRA expression BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new AbsExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 115: // expression ::= MINUS expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new MinusExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 114: // expression ::= expression DIVIDE expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new DivideExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 113: // expression ::= expression TIMES expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new TimesExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 112: // expression ::= expression MINUS expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new MinusExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 111: // expression ::= expression PLUS expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new PlusExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 110: // expression ::= long_id REQUIRES long_id
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new IncludesExpression(e1, e2, parser.getFeaturesSymbolTable());
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 109: // expression ::= long_id EXCLUDES long_id
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new ExcludesExpression(e1, e2, parser.getFeaturesSymbolTable());
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 108: // expression ::= XORAGG BRA children_attribute_id BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ChildrenAttributeID e1 = (ChildrenAttributeID) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new XorAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 107: // expression ::= XORAGG BRA expression_list BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ExpressionList e1 = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new XorAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 106: // expression ::= ORAGG BRA children_attribute_id BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ChildrenAttributeID e1 = (ChildrenAttributeID) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new OrAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 105: // expression ::= ORAGG BRA expression_list BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ExpressionList e1 = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new OrAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 104: // expression ::= ANDAGG BRA children_attribute_id BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ChildrenAttributeID e1 = (ChildrenAttributeID) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new AndAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 103: // expression ::= ANDAGG BRA expression_list BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ExpressionList e1 = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new AndAggExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 102: // expression ::= long_id IN set_expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			SetExpression e2 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new InExpression(new LongIDExpression(e1, parser.getFeaturesSymbolTable()), e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 101: // expression ::= expression LOWER expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new LowerExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 100: // expression ::= expression LEQ expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new LEQExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 99: // expression ::= expression GREATER expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new GreaterExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 98: // expression ::= expression GEQ expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new GEQExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 97: // expression ::= expression NOTEQUALS expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new NotEqualsExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 96: // expression ::= expression EQUALS expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EqualsExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 95: // expression ::= long_id
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new LongIDExpression(e1, parser.getFeaturesSymbolTable());
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 94: // expression ::= FALSE
		{
			Expression RESULT = null;
			RESULT = new FalseExpression();
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 93: // expression ::= TRUE
		{
			Expression RESULT = null;
			RESULT = new TrueExpression();
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 92: // expression ::= BRA expression BRAEND
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new ParenthesesExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 91: // expression ::= NOT expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new NotExpression(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 90: // expression ::= expression IFANDONLYIF expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new IfAndOnlyIfExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 89: // expression ::= expression INVERSEIMPLIES expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new InverseImpliesExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 88: // expression ::= expression IMPLIES expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new ImpliesExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 87: // expression ::= expression OR expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new OrExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 86: // expression ::= expression AND expression
		{
			Expression RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AndExpression(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 85: // sub_attribute ::= ID attribute_body SEMICOLON
		{
			SubAttribute RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			AttributeBody e2 = (AttributeBody) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SubAttribute(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_attribute", 24,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 84: // struct_attribute_body ::= sub_attribute
					// struct_attribute_body
		{
			StructAttributeBody RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			SubAttribute e1 = (SubAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			StructAttributeBody e2 = (StructAttributeBody) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new StructAttributeBody(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_attribute_body", 23,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 83: // struct_attribute_body ::= sub_attribute
		{
			StructAttributeBody RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			SubAttribute e1 = (SubAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new StructAttributeBody(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_attribute_body", 23,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 82: // attribute_conditional ::= IFOUT COLON IN set_expression
		{
			AttributeConditionnal RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			SetExpression e1 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeConditionnal(false, e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional", 22,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 81: // attribute_conditional ::= IFOUT COLON IS expression
		{
			AttributeConditionnal RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeConditionnal(false, e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional", 22,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 80: // attribute_conditional ::= IFIN COLON IN set_expression
		{
			AttributeConditionnal RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			SetExpression e1 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeConditionnal(true, e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional", 22,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 79: // attribute_conditional ::= IFIN COLON IS expression
		{
			AttributeConditionnal RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeConditionnal(true, e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional", 22,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 78: // attribute_conditional ::= IFIN COLON IN set_expression COMMA
					// IFOUT COLON IN set_expression
		{
			AttributeConditionnal RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
			SetExpression e1 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			SetExpression e2 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeConditionnal(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional", 22,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 77: // attribute_conditional ::= IFIN COLON IN set_expression COMMA
					// IFOUT COLON IS expression
		{
			AttributeConditionnal RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
			SetExpression e1 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeConditionnal(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional", 22,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 76: // attribute_conditional ::= IFIN COLON IS expression COMMA
					// IFOUT COLON IN set_expression
		{
			AttributeConditionnal RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			SetExpression e2 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeConditionnal(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional", 22,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 75: // attribute_conditional ::= IFIN COLON IS expression COMMA
					// IFOUT COLON IS expression
		{
			AttributeConditionnal RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeConditionnal(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional", 22,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 74: // attribute_body ::= COMMA attribute_conditional
		{
			AttributeBody RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			AttributeConditionnal e1 = (AttributeConditionnal) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeBody(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_body", 21,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 73: // attribute_body ::= IN set_expression
		{
			AttributeBody RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			SetExpression e1 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeBody(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_body", 21,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 72: // attribute_body ::= IN set_expression COMMA
					// attribute_conditional
		{
			AttributeBody RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SetExpression e1 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			AttributeConditionnal e2 = (AttributeConditionnal) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeBody(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_body", 21,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 71: // attribute_body ::= IS expression
		{
			AttributeBody RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new AttributeBody(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_body", 21,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 70: // attribute_body ::=
		{
			AttributeBody RESULT = null;
			RESULT = null;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_body", 21,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 69: // base_attribute ::= ID ID attribute_body SEMICOLON
		{
			BaseAttribute RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e3left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e3right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			AttributeBody e3 = (AttributeBody) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new BaseAttribute(e1, e2, e3);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("base_attribute", 20,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 68: // base_attribute ::= ENUM ID attribute_body SEMICOLON
		{
			BaseAttribute RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			AttributeBody e2 = (AttributeBody) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new BaseAttribute(Expression.ENUM, e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("base_attribute", 20,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 67: // base_attribute ::= BOOL ID attribute_body SEMICOLON
		{
			BaseAttribute RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			AttributeBody e2 = (AttributeBody) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new BaseAttribute(Expression.BOOL, e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("base_attribute", 20,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 66: // base_attribute ::= REALP ID attribute_body SEMICOLON
		{
			BaseAttribute RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			AttributeBody e2 = (AttributeBody) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new BaseAttribute(Expression.REAL, e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("base_attribute", 20,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 65: // base_attribute ::= INT ID attribute_body SEMICOLON
		{
			BaseAttribute RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			AttributeBody e2 = (AttributeBody) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new BaseAttribute(Expression.INT, e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("base_attribute", 20,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 64: // attribute ::= ID ID CBRA struct_attribute_body CBRAEND
		{
			Attribute RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e3left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e3right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			StructAttributeBody e3 = (StructAttributeBody) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Attribute(e1, e2, e3);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute", 19,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 63: // attribute ::= base_attribute
		{
			Attribute RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			BaseAttribute e1 = (BaseAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute", 19,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 62: // cardinality_limit ::= ID
		{
			String RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("cardinality_limit", 15,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // cardinality_limit ::= INTEGER
		{
			String RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("cardinality_limit", 15,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // cardinality_limit ::= TIMES
		{
			String RESULT = null;
			RESULT = "*";
			CUP$parser$result = parser.getSymbolFactory().newSymbol("cardinality_limit", 15,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // cardinality_limit ::= ZERO
		{
			String RESULT = null;
			RESULT = "0";
			CUP$parser$result = parser.getSymbolFactory().newSymbol("cardinality_limit", 15,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // cardinality ::= SQBRA cardinality_limit DOT DOT
					// cardinality_limit SQBRAEND
		{
			Cardinality RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Cardinality(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("cardinality", 14,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // cardinality ::= ALLOF
		{
			Cardinality RESULT = null;
			RESULT = new Cardinality("*", "*");
			CUP$parser$result = parser.getSymbolFactory().newSymbol("cardinality", 14,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // cardinality ::= SOMEOF
		{
			Cardinality RESULT = null;
			RESULT = new Cardinality("1", "*");
			CUP$parser$result = parser.getSymbolFactory().newSymbol("cardinality", 14,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // cardinality ::= ONEOF
		{
			Cardinality RESULT = null;
			RESULT = new Cardinality("1", "1");
			CUP$parser$result = parser.getSymbolFactory().newSymbol("cardinality", 14,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // hierarchical_feature ::= long_id
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Feature(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature", 13,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // hierarchical_feature ::= OPT MANY long_id
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Feature(e1, new Cardinality("0", "*"));
			CUP$parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature", 13,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // hierarchical_feature ::= MANY long_id
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Feature(e1, new Cardinality("1", "*"));
			CUP$parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature", 13,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // hierarchical_feature ::= OPT long_id
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Feature(true, e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature", 13,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // hierarchical_feature ::= SHARED long_id
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Feature(e1, true);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature", 13,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // hierarchical_feature ::= OPT MANY base_feature
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Feature e1 = (Feature) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			e1.setCardinality(new Cardinality("0", "*"));
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature", 13,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // hierarchical_feature ::= MANY base_feature
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Feature e1 = (Feature) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			e1.setCardinality(new Cardinality("1", "*"));
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature", 13,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // hierarchical_feature ::= OPT base_feature
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Feature e1 = (Feature) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			e1.setOptional();
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature", 13,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // hierarchical_feature ::= feature
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Feature e1 = (Feature) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature", 13,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // hierarchical_features ::= hierarchical_feature COMMA
					// hierarchical_features
		{
			HierarchicalFeatures RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Feature e1 = (Feature) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			HierarchicalFeatures e2 = (HierarchicalFeatures) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new HierarchicalFeatures(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("hierarchical_features", 12,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // hierarchical_features ::= hierarchical_feature
		{
			HierarchicalFeatures RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Feature e1 = (Feature) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new HierarchicalFeatures(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("hierarchical_features", 12,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // feature_group ::= GROUP cardinality CBRA
					// hierarchical_features CBRAEND
		{
			FeatureGroup RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			Cardinality e1 = (Cardinality) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			HierarchicalFeatures e2 = (HierarchicalFeatures) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new FeatureGroup(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("feature_group", 18,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // feature_body_item ::= feature_group
		{
			FeatureBodyItem RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			FeatureGroup e1 = (FeatureGroup) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("feature_body_item", 17,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // feature_body_item ::= attribute
		{
			FeatureBodyItem RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Attribute e1 = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("feature_body_item", 17,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // feature_body_item ::= constraint
		{
			FeatureBodyItem RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Constraint e1 = (Constraint) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("feature_body_item", 17,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // feature_body_item ::= data
		{
			FeatureBodyItem RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Data e1 = (Data) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("feature_body_item", 17,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // feature_body ::= feature_body_item feature_body
		{
			FeatureBody RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			FeatureBodyItem e1 = (FeatureBodyItem) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			FeatureBody e2 = (FeatureBody) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new FeatureBody(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("feature_body", 16,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // feature_body ::=
		{
			FeatureBody RESULT = null;
			RESULT = null;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("feature_body", 16,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // base_feature ::= ROOT ID feature_group
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			FeatureGroup e2 = (FeatureGroup) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Feature(e1, e2, true);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("base_feature", 11,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // base_feature ::= ROOT ID CBRA feature_body CBRAEND
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			FeatureBody e2 = (FeatureBody) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Feature(e1, e2, true);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("base_feature", 11,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // base_feature ::= long_id feature_group
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			FeatureGroup e2 = (FeatureGroup) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Feature(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("base_feature", 11,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // base_feature ::= long_id CBRA feature_body CBRAEND
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			FeatureBody e2 = (FeatureBody) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Feature(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("base_feature", 11,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // feature ::= long_id cardinality CBRA feature_body CBRAEND
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			Cardinality e2 = (Cardinality) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e3left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e3right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			FeatureBody e3 = (FeatureBody) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Feature(e1, e2, e3);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("feature", 10,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // feature ::= base_feature
		{
			Feature RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Feature e1 = (Feature) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("feature", 10,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // long_id ::= short_id DOT long_id
		{
			String RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1 + "." + e2;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("long_id", 9,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // long_id ::= short_id
		{
			String RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("long_id", 9,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // short_id ::= ID
		{
			String RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("short_id", 8,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // short_id ::= PARENT
		{
			String RESULT = null;
			RESULT = "parent";
			CUP$parser$result = parser.getSymbolFactory().newSymbol("short_id", 8,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // short_id ::= THIS
		{
			String RESULT = null;
			RESULT = "this";
			CUP$parser$result = parser.getSymbolFactory().newSymbol("short_id", 8,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // short_id ::= ROOT
		{
			String RESULT = null;
			RESULT = "root";
			CUP$parser$result = parser.getSymbolFactory().newSymbol("short_id", 8,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // constant ::= CONST BOOL ID FALSE SEMICOLON
		{
			Constant RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			RESULT = new Constant(Expression.BOOL, e1, "false");
			CUP$parser$result = parser.getSymbolFactory().newSymbol("constant", 2,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // constant ::= CONST BOOL ID TRUE SEMICOLON
		{
			Constant RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			RESULT = new Constant(Expression.BOOL, e1, "true");
			CUP$parser$result = parser.getSymbolFactory().newSymbol("constant", 2,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // constant ::= CONST REALP ID ZERO SEMICOLON
		{
			Constant RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			RESULT = new Constant(Expression.REAL, e1, "0");
			CUP$parser$result = parser.getSymbolFactory().newSymbol("constant", 2,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // constant ::= CONST REALP ID REAL SEMICOLON
		{
			Constant RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Constant(Expression.REAL, e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("constant", 2,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // constant ::= CONST INT ID ZERO SEMICOLON
		{
			Constant RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			RESULT = new Constant(Expression.INT, e1, "0");
			CUP$parser$result = parser.getSymbolFactory().newSymbol("constant", 2,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // constant ::= CONST INT ID INTEGER SEMICOLON
		{
			Constant RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Constant(Expression.INT, e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("constant", 2,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // record_field ::= ID ID SEMICOLON
		{
			RecordField RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new RecordField(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("record_field", 7,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // record_field ::= simple_type
		{
			RecordField RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			SimpleType e1 = (SimpleType) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new RecordField(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("record_field", 7,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // record_body ::= record_field record_body
		{
			RecordBody RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			RecordField e1 = (RecordField) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			RecordBody e2 = (RecordBody) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new RecordBody(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("record_body", 6,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // record_body ::= record_field
		{
			RecordBody RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			RecordField e1 = (RecordField) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new RecordBody(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("record_body", 6,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // record ::= STRUCT ID CBRA record_body CBRAEND
		{
			Record RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			RecordBody e2 = (RecordBody) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new Record(Expression.STRUCT, e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("record", 5,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // simple_type ::= BOOL ID SEMICOLON
		{
			SimpleType RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SimpleType(Expression.BOOL, e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type", 4,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // simple_type ::= REALP ID SEMICOLON
		{
			SimpleType RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SimpleType(Expression.REAL, e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type", 4,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // simple_type ::= INT ID SEMICOLON
		{
			SimpleType RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SimpleType(Expression.INT, e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type", 4,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // simple_type ::= ENUM ID IN set_expression SEMICOLON
		{
			SimpleType RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			SetExpression e2 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SimpleType(Expression.ENUM, e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type", 4,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // simple_type ::= REALP ID IN set_expression SEMICOLON
		{
			SimpleType RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			SetExpression e2 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SimpleType(Expression.REAL, e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type", 4,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // simple_type ::= INT ID IN set_expression SEMICOLON
		{
			SimpleType RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			SetExpression e2 = (SetExpression) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SimpleType(Expression.INT, e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type", 4,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // type ::= record
		{
			Type RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Record e1 = (Record) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("type", 3,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // type ::= simple_type
		{
			Type RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			SimpleType e1 = (SimpleType) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("type", 3,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // model_item ::= feature
		{
			ModelItem RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Feature e1 = (Feature) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("model_item", 1,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // model_item ::= constant
		{
			ModelItem RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Constant e1 = (Constant) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("model_item", 1,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // model_item ::= type
		{
			ModelItem RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Type e1 = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("model_item", 1,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // model ::= model_item model
		{
			Model RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ModelItem e1 = (ModelItem) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Model e2 = (Model) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Model(e1, e2);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("model", 0,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // model ::= model_item
		{
			Model RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			ModelItem e1 = (ModelItem) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Model(e1);
			CUP$parser$result = parser.getSymbolFactory().newSymbol("model", 0,
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // $START ::= model EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Model start_val = (Model) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			RESULT = start_val;
			CUP$parser$result = parser.getSymbolFactory().newSymbol("$START", 0,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
					((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
		}
			/* ACCEPT */
			CUP$parser$parser.done_parsing();
			return CUP$parser$result;

			/* . . . . . . */
		default:
			throw new Exception("Invalid action number found in internal parse table");

		}
	}
}
